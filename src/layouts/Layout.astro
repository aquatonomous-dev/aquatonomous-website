---
import { SEO } from "astro-seo";
import Footer from "@components/Footer.astro";
import Navbar from "@components/navbar/Navbar.astro";
import "@fontsource-variable/inter/index.css";
import  SpeedInsights  from "@vercel/speed-insights/astro"
import '@fontsource-variable/bricolage-grotesque';



export interface Props {
  title: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString();

const resolvedImageWithDomain = new URL(
  "https://github.com/aquatonomous-dev/aquatonomous-website/blob/main/public/photos/NauticalDisaster.jpg?raw=true"
).toString();

const { title } = Astro.props;

const makeTitle = title
  ? title + " | " + "aQuatonomous"
  : "aQuatonomous - ASV Design Team @ Queen's University";
---

<!DOCTYPE html>
<html lang="en" style="scroll-behavior: smooth !important;">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/logos/GradientTextLogo.png" sizes="32x32" />
    <link rel="icon" type="image/svg+xml" href="/logos/GradientTextLogo.svg?v=1" />
    <link href="https://fonts.googleapis.com/css2?family=DM+Mono:ital,wght@0,300;0,400;0,500;1,300;1,400;1,500&display=swap" rel="stylesheet">
    <meta name="generator" content={Astro.generator} />
    <meta property="og:locale" content="en_CA" />

    <!-- <link rel="preload" as="image" href={src} alt="Hero" /> -->
    <SEO
      title={makeTitle}
      description="aQuatonomous is an ASV design team at Queen's University specializing in autonomous surface vehicle innovation."
      canonical={canonicalURL}
      openGraph={{
        basic: {
          url: canonicalURL,
          type: "website",
          title: `aQuatonomous - ASV Design Team @ Queen's University`,
          image: resolvedImageWithDomain,
        },
        image: {
          alt: "aQuatonomous Homepage Screenshot",
        },
      }}
    />
  </head>
  <body class="selection:bg-AquaNeon selection:text-black" class="scroll-smooth">
    <!-- VERY IMPORANT NOTE READ HERE -->
    <!-- I implemented an animated background but it will hide every element behind in the z index -->
    <!-- If you want to add another page make sure the container has class="relative z-10" -->
    <!-- I apologize for the future headaches this may cause -->
    <div id="container" class="fixed top-0 left-0 w-screen h-screen z-0 pointer-events-none"></div>
    <div class="fixed w-screen h-screen bg-radial-bottom-white from-white to-transparent [background-size:100%_100%]"></div>

    <Navbar />
    <slot />
    <Footer />
    <style is:global>
      /* Improve Page speed */
      /* https://css-tricks.com/almanac/properties/c/content-visibility/ */
      img {
        content-visibility: auto;
      }
    </style>
  </body>
  <script>
    import * as THREE from 'three';
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
    import { SimplexNoise } from 'three/examples/jsm/math/SimplexNoise.js';
  
    export default class Sketch {
      constructor(options){
        this.container = options.domElement;
        this.width = window.innerWidth;
        this.height = window.innerHeight;
  
        this.camera = new THREE.PerspectiveCamera(70, this.width / this.height, 0.01, 10);
        this.camera.position.z = 1.5;
  
        this.scene = new THREE.Scene();
  
        this.renderer = new THREE.WebGLRenderer({ 
          antialias: true,
          alpha: true 
        });
        this.renderer.setClearColor(0x000000, 0);
        this.renderer.setPixelRatio(window.devicePixelRatio);
  
        this.container.appendChild(this.renderer.domElement);
        this.controls = new OrbitControls(this.camera, this.renderer.domElement);
  
        this.time = 0;
        this.noise = new SimplexNoise();
  
        this.resize();
        this.addObjects();
        this.render();
  
        this.setupResize();
      }
  
      resize(){
        this.width = window.innerWidth;
        this.height = window.innerHeight;
        this.renderer.setSize(this.width, this.height);
        this.camera.aspect = this.width / this.height;
        this.camera.updateProjectionMatrix();
      }
  
      setupResize(){
        window.addEventListener('resize', this.resize.bind(this));
      }
  
      addObjects(){
        // Create a plane geometry
        this.geometry = new THREE.PlaneGeometry(5, 5, 400, 400);
  
        // Modify geometry vertices using SimplexNoise
        const vertices = this.geometry.attributes.position;
        for (let i = 0; i < vertices.count; i++) {
          const x = vertices.getX(i);
          const y = vertices.getY(i);
          const z = this.noise.noise(x * 1.5, y * 1.5) * 0.2;
          vertices.setZ(i, z);
        }
  
        // Remap UV coordinates for altitude mapping
        const uvs = this.geometry.attributes.uv;
        for (let i = 0; i < vertices.count; i++) {
          const z = vertices.getZ(i);
          uvs.setXY(i, 0, z);
        }
  
        this.geometry.attributes.position.needsUpdate = true;
        this.geometry.attributes.uv.needsUpdate = true;
  
        // Create a canvas texture
        const canvas = document.createElement('canvas');
        canvas.width = 256;
        canvas.height = 256;
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = "white";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.strokeStyle = "#c1def6";
        ctx.lineWidth = 2;
        for (let i = 0; i < canvas.height; i += 20) {
          ctx.beginPath();
          ctx.moveTo(0, i);
          ctx.lineTo(canvas.width, i);
          ctx.stroke();
        }
  
        const texture = new THREE.CanvasTexture(canvas);
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        texture.repeat.set(5, 2); // Adjust repeat for line density
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
  
         this.material = new THREE.MeshBasicMaterial({ map: texture });
  
        this.mesh = new THREE.Mesh(this.geometry, this.material);
        this.scene.add(this.mesh);
  
        this.texture = texture; // Save texture reference for animation
      }
    
      render(){
        this.time += 0.05;
        this.mesh.rotation.y = 0;
  
        // Animate texture offset to move the lines
        this.texture.offset.y -= 0.0001;
  
    
        this.renderer.render(this.scene, this.camera);
        requestAnimationFrame(this.render.bind(this));
      }
    }
    
    new Sketch({
      domElement: document.getElementById('container')
    });
  </script>
</html>
